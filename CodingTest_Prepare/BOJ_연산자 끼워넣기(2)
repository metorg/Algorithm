#include <string>
#include <vector>
#include <iostream>
#include <queue>

using namespace std;

int visit[4];
vector<int> num;
int n,m;
int max_ans = -1e9;
int min_ans = 1e9;
int sum = 0;

void dfs(int depth, int cur) {
	if (depth == n - 1) {
		max_ans = max(max_ans, cur);
		min_ans = min(min_ans, cur);
		return;
	}
	for (int i = 0; i < 4; i++) {
		if (visit[i] == 0)continue;
		if (i == 0) {
			visit[0] -= 1;
			dfs(depth + 1, cur + num[depth + 1]);
			visit[0] += 1;
		}
		else if (i == 1) {
			visit[1] -= 1;
			dfs(depth + 1, cur - num[depth + 1]);
			visit[1] += 1;
		}
		else if (i == 2) {
			visit[2] -= 1;
			dfs(depth + 1, cur* num[depth + 1]);
			visit[2] += 1;
		}
		else {
			visit[3] -= 1;
			dfs(depth + 1, cur / num[depth + 1]);
			visit[3] += 1;
		}		
	}
}

int main() {

	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	
	cin >> n;
	for (int i = 0; i < n; i++) {
		cin >> m;
		num.push_back(m);
	}
	for (int i = 0; i < 4; i++) {
		cin >> visit[i];
	}
	dfs(0, num[0]);
	cout << max_ans << '\n' << min_ans;

}
